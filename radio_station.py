#!/usr/bin/env python3
#!
# radio_station.py
#
# Console menu driven internet radio station streamer.
# Uses GStreamer playbin which is passed the uri of an internet radio station.
# It uses loop and call backs, rather than polling.
#
# Ian Stewart - 2020-03-26
#
# Notes:
# Control-C will stop the station that is being listened to.
# This is done through using try: / cxcept: 
#    try:
#        mainloop.run()
#    except KeyboardInterrupt:
#        print('\n Station deselected via Ctrl-C')
#
#    pipe.set_state(Gst.State.NULL)
#
# Without the above a Control-C would have no effect, and therefore to stop
# the program it is required to kill the process.
# gst-launch-1.0 has "-e" to allow control-C abort, but Gst.parse_launch() 
# does not.
#
# Note that AAC streamed internet stations need the Gstreamer "bad".
# $ sudo apt install gstreamer1.0-plugins-bad
# $ apt list --installed
# gstreamer1.0-plugins-base/bionic-updates,now 1.14.5-0ubuntu1~18.04.1 amd64 [installed]
# gstreamer1.0-plugins-good/bionic-updates,now 1.14.5-0ubuntu1~18.04.1 amd64 [installed]
# gstreamer1.0-plugins-bad/bionic-updates,now 1.14.5-0ubuntu1~18.04.1 amd64 [installed]
# $ gst-inspect-1.0 faad
# Factory Details:
#  Rank                     secondary (128)
#  Long-name                AAC audio decoder
#
# Importing...
import sys
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GLib

# For BBC Station info: 
# https://www.astra2sat.com/radio/bbc-radio/bbc-aac-radio-streams/

# Edit the staton list to add tuples for more stations.
# Only using [0] and [2] of each tuple.
station_list = [
        ( 
        "Radio New Zealand Concert Program",
        "rnz-concert",
        "http://radionz-ice.streamguys.com/concert",
        "aac",
        ),
        ( 
        "Radio New Zealand Nation Program",
        "rnz-nation",
        "http://radionz-ice.streamguys.com/national",
        "aac",
        ),
        ( 
        "ABC Sydney 702AM",
        "abc-sydney",
        "http://live-radio01.mediahubaustralia.com/2LRW/mp3/",
        "mp3",
        ),
        (
        "BBC Radio One",
        "bbc-1",
        "http://a.files.bbci.co.uk/media/live/manifesto/audio/simulcast/hls/nonuk/sbr_low/ak/bbc_radio_one.m3u8",
        "aac",
        ),
        (
        "BBC Radio Two",
        "bbc-2",
        "http://a.files.bbci.co.uk/media/live/manifesto/audio/simulcast/hls/nonuk/sbr_low/ak/bbc_radio_two.m3u8",
        "aac",
        ),
        (
        "BBC Radio Three",
        "bbc-3",
        "http://a.files.bbci.co.uk/media/live/manifesto/audio/simulcast/hls/nonuk/sbr_low/ak/bbc_radio_three.m3u8",
        "aac",
        ),
        (
        "BBC Radio Four",
        "bbc-4",
        "http://a.files.bbci.co.uk/media/live/manifesto/audio/simulcast/hls/nonuk/sbr_low/ak/bbc_radio_fourfm.m3u8",
        "aac",
        ),
        ]


# Edit these headings and lists to tailor menus to requirements.
default_menu_exit_message = "Return to Previous Menu"

main_menu_heading = "Main Menu:"
main_menu_list = [  
        "Select Radio Station",        
      ]
exit_message = "Exit program"

sub_menu_1_heading = "Select Station"
sub_menu_1_list = []  # List is generated by sub_menu_1() function
exit_message_1 = "Return to Main Menu"

# Not used. Maybe in the future?...
sub_menu_2_heading = "Recording Menu:"
sub_menu_2_list = [ 
        "Start Recording", 
        "Stop Recording", 
        ]

sub_menu_3_heading = "Replay Menu"
sub_menu_3_list = [
        "Select a file to replay"
        ]


def create_menu(heading, menu_list, exit_message = default_menu_exit_message):
    "Create a menu. Accept keyboard input and validate. Return keyboard string"  
    while True:
        # Display a heading
        print("\n {}".format(heading))
        # Display the menu
        for index, item in enumerate(menu_list):
            print("{:>5}. {}".format(str(index + 1), item))
        # Display the exit option
        print("{:>5}. {}".format("0", exit_message))
        # Get input with prompting.
        response = input("\n * Enter your choice [0]: ")
        # Set default response
        if response == "":
            response = "0"

        try:
            # Does response convert to an integer?
            value = int(response)
            # Is the integer within the range?
            if value >= 0 and value <= len(menu_list):
                return response
            else:
                # An integer, but out of range.
                print("\nInvalid entry: {}. Enter a number between 0 and {}\n"
                        .format(response, len(menu_list)))
                continue
        except ValueError as e:
            # A string that cannot be convertded to an integer
            print("\nInvalid entry: {}. Enter a number between 0 and {}\n"
                    .format(response, len(menu_list)))
            continue


def create_sub_menu_1():
    "Launch submenu to select radio station to play."

    while True:
        # Pass: heading, list of items, exit message. Returns numeral string
        sub_menu_1_list = []
        for index, item in enumerate(station_list):
            sub_menu_1_list.append(item[0])
       
        response = create_menu(sub_menu_1_heading, sub_menu_1_list, exit_message_1)

        if response == "0":
            # Return to main menu
            return response # "0"

        if response != "0":
            # The response string is used to selected the radio station.
            # Select the station
            station_index = int(response) - 1

            print("\n Station selected: {}"
                    .format(station_list[station_index][0]))

            # Return the uri
            return station_list[station_index][2]

def main():
    'Main program code. Launch menus. Call radio() station player.'
    while True:

        response = create_menu(main_menu_heading, main_menu_list, exit_message)
        #print(response)
        if response == "0":
            sys.exit("\n bye...")

        # Response == 1
        uri = create_sub_menu_1()
        #print(uri)
        if uri == "0":
            continue  # Display main menu again.

        else:
            radio(uri)


def radio(uri):
    'Use Gstreamer playbin to play the station based on the supplied uri'
    # Init
    Gst.init(None)

    # Call handlers
    def on_eos(bus, message):
        print('Received EOS-Signal')
        sys.exit(0)

    def on_error(bus, message):
        print('Received Error-Signal')
        (error, debug) = message.parse_error()
        print('Error-Details: #%u: %s' % (error.code, debug))
        sys.exit(2)

    # Use playbin and pass the uri for the radio station.
    pipe = Gst.parse_launch("playbin uri={}".format(uri))

    # Binding End-of-Stream-Signal on source pipe
    pipe.bus.add_signal_watch()
    pipe.bus.connect("message::eos", on_eos)
    pipe.bus.connect("message::error", on_error)

    print("\n Streaming... Type control-C to return to menu")
    pipe.set_state(Gst.State.PLAYING)

    mainloop = GLib.MainLoop()

    try:
        mainloop.run()
    except KeyboardInterrupt:
        print('\n Station deselected via Ctrl-C')

    pipe.set_state(Gst.State.NULL)

    return 

if __name__ == "__main__":

    main()


